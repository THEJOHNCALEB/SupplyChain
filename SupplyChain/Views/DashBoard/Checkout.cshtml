@{

    @using SupplyChain.Data;
    @using SupplyChain.Models;
    @using SupplyChain.Processor;

    @using System.Security.Claims;
    @inject ApplicationDbContext _userDataAccess;
    @inject CartDbContext _cartDataAccess;
   
    var email = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
    var user = _userDataAccess.QueryOne(c => c.Email == email);
    var allCartDrugs = _cartDataAccess.QueryMany(c => c.UploadedBy == user.Id);
    long TotalPrice = 0;
    for (int i = 0; i <= allCartDrugs.Count() - 1; i++) { TotalPrice = TotalPrice + allCartDrugs[i].Price; }
    List<string> allDrugsId = new List<string>(); // Initialize the list

    // Loop through allCartDrugs and add each drug's ID to the list
    for (int i = 0; i < allCartDrugs.Count(); i++)
    {
        allDrugsId.Add(allCartDrugs[i].Id.ToString());
    }

   
}
@{
    ViewData["Title"] = "Checkout";
}

@{
    Layout = "_LayoutDashBoard";
}
<main id="main" class="main">


    <section class="section">
 <div class="container">
          @if(allCartDrugs.Count() == 0)
            {
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    THERE'S NO ITEM IN YOUR CART! ADD AN ITEM TO GET STARTED
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
  <div class="row">
    <div class="col-md-4 order-md-2 mb-4">
      <h4 class="d-flex justify-content-between align-items-center mb-3">
        <span class="text-muted">Your Cart</span>
                        <span class="badge bg-info rounded-pill">@allCartDrugs.Count()</span>
      </h4>
      <ul class="list-group mb-3">
          @{
                    if (allCartDrugs.Count > 0)
                    {
                        foreach (var drug in allCartDrugs)
                        {
                                    <li class="list-group-item lh-condensed">
                                        <div class="">
                                        <div class="row justify-content-between">
                                            <span class="col-6 text-muted">&#8358; @string.Format("{0:N0}", @drug.Price)</span>
                                                <button onclick="DeleteSales('@drug.Id')" type="button" class="btn col-6 btn-outline-danger btn-sm delete-button">Delete</button>
                                        </div>
                                        </div>
                                        <div>
                                            <h6 class="my-2">@Functions.ToSentenceCase(drug.CompanyName) - @Functions.ToSentenceCase(drug.ItemName)</h6>
                                            <small class="text-muted">@drug.About</small>
                                        </div>
                                       
                                    </li>

        }}}
      @*   <li class="list-group-item d-flex justify-content-between bg-light">
          <div class="text-success"> 
            <h6 class="my-0">Promo code</h6>
            <small>EXAMPLECODE</small>
          </div>
          <span class="text-success">-$5</span>
        </li> *@
        <li class="list-group-item d-flex justify-content-between">
          <span>Total (NGN)</span>
                            <strong>&#8358; @string.Format("{0:N0}", TotalPrice) </strong>
                        </li>
      </ul>

                    <form class="card p-2">
        <div class="input-group">
          <input type="text" class="form-control mr-2" placeholder="Promo code">
          <div class="input-group-append">
            <button type="submit" class="btn btn-secondary">Redeem</button>
          </div>
        </div>
      </form>
    </div>
    <div class="col-md-8 order-md-1">
      <h4 class="mb-3">Checkout</h4>
                    <form class="needs-validation" novalidate id="paymentForm">
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="firstName">First name</label>
            <input type="text" class="form-control" id="firstName" placeholder="" value="@user.FirstName" disabled required>
            <div class="invalid-feedback">
              Valid first name is required.
            </div>
          </div>
          <div class="col-md-6 mb-3">
            <label for="lastName">Last name</label>
            <input type="text"disabled class="form-control" id="lastName" placeholder="" value="@user.Surname" required>
            <div class="invalid-feedback">
              Valid last name is required.
            </div>
          </div>
        </div>


        <div class="mb-3">
          <label for="email">Email </label>
                            <input disabled type="email" class="form-control" id="email-address" value="@user.Email">
          <div class="invalid-feedback">
            Please enter a valid email address for shipping updates.
          </div>
        </div>

        <div class="mb-3">
          <label for="address">Address</label>
          <input type="text" class="form-control" id="address" placeholder="1234 Main St" required>
          <div class="invalid-feedback">
            Please enter your shipping address.
          </div>
        </div>

        <div class="mb-3">
          <label for="address2">Address 2 <span class="text-muted">(Optional)</span></label>
          <input type="text" class="form-control" id="address2" placeholder="Apartment or suite">
        </div>
        <div class="row">
          <div class="col-md-4 mb-3">
            <label for="country">Country</label>
            <select  onchange="getState()" class="custom-select form-control d-block w-100" id="country" required>
              <option  disabled selected value="">Choose...</option>
              <option>Nigeria</option>
            </select>
            <div class="invalid-feedback">
              Please select a valid country.
            </div>
          </div>
          <div class="col-md-4 mb-3">
            <label for="state">State</label>
            <select onchange="getLga()" class="custom-select form-control d-block w-100" id="state" required>
              <option selected disabled value="">Choose...</option>
            </select>
            <div class="invalid-feedback">
              Please provide a valid state.
            </div>
          </div><div class="col-md-4 mb-3"> 
            <label for="lga">LGA</label>
            <select class="custom-select form-control d-block w-100" id="lga" required>
              <option selected disabled value="">Choose...</option>
            </select>
            <div class="invalid-feedback">
              Please provide a valid LGA.
            </div>
          </div>
        </div>
        <hr class="mb-4">
        <div class="custom-control custom-checkbox">
          <input type="checkbox" class="custom-control-input" id="same-address">
          <label class="custom-control-label" for="same-address">Shipping address is the same as my billing address</label>
        </div>
        <div class="custom-control custom-checkbox">
          <input type="checkbox" class="custom-control-input" id="save-info">
          <label class="custom-control-label" for="save-info">Save this information for next time</label>
        </div>
        <hr class="mb-4">
                        <button class="btn btn-primary btn-lg btn-block"
                        @(TotalPrice <= 0 ? "disabled" : "")
                                type="submit">
                            Continue to checkout
                        </button>

                    </form>
    </div>
  </div>
  </div>
  </section>

</main>

            @section Scripts {
    <script src="https://js.paystack.co/v1/inline.js"></script>
    <script>
        const paymentForm = document.getElementById('paymentForm');
        paymentForm.addEventListener("submit", payWithPaystack, false);

        function payWithPaystack(e) {
            e.preventDefault();

            let handler = PaystackPop.setup({
                key: 'pk_test_450d8be5ad0e975317bc12b4346b78b576c458a4', // Replace with your public key
                email: document.getElementById("email-address").value,
                amount: @TotalPrice * 100, // Assuming @TotalPrice is a numeric value rendered on the server
                onClose: function () {
                    alert('Window closed.');
                },
                callback: function (response) {
                    // Convert server-side array to JavaScript array (ensure @allDrugsId is properly rendered)
                    let allDrugsId = @Html.Raw(Json.Serialize(allDrugsId));

                  
                    // Send the data using AJAX
                    $.ajax({
                        type: "POST",
                        url: "./Checkout", // Replace with your controller and action method
                        data: { "Identification": allDrugsId, "reference": response.reference },
                    });
                }
            });

            handler.openIframe();
        }

        function DeleteSales(value) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-danger',
                    cancelButton: 'btn btn-success'
                },
                buttonsStyling: false
            });

            swalWithBootstrapButtons.fire({
                title: 'Do you want to Delete this Item?',
                "icon": "question",
                showCancelButton: true,
                text: "THIS IS PERMANENT AND CANNOT BE UNDONE!",
                confirmButtonText: 'Delete',
                cancelButtonText: 'Cancel',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "./CartDeleteDrug",
                        type: "POST",
                        data: { "Identification": value },
                        success: function (data) {
                            if (data === "0") {
                                Swal.fire({
                                    "icon": "error",
                                    "title": "Drug cannot be found"
                                }).then(() => {
                                    location.reload();
                                });
                            } else if (data === "1") {
                                Swal.fire({
                                    "icon": "success",
                                    "title": "Drug deleted successfully"
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    "icon": "error",
                                    "title": "Error encountered while deleting drug!"
                                }).then(() => {
                                    location.reload();
                                });
                            }
                        }

                    });
                }
            });
        }

        function getState() {
            fetch("https://nga-states-lga.onrender.com/fetch").then(response => response.json()).then(data => {

                data.forEach(singleData => {

                    var newElement = document.createElement("option");

                    newElement.textContent = singleData;

                    newElement.innerHTML = `<option >${singleData}</option>`

                    document.querySelector("#state").appendChild(newElement)

                })

                //  string

            })
        }

        function getLga() {
            var state = document.querySelector("#state").value;
            document.querySelector("#lga").innerHTML = "<option disabled selected>Select</option>";
            fetch(`https://nga-states-lga.onrender.com/?state=${state}`).then(response => response.json()).then(data => {

                document.querySelector("#lga").innerHTML = ""
                data.forEach(singleData => {

                    var newElement = document.createElement("option");

                    newElement.textContent = singleData

                    document.querySelector("#lga").appendChild(newElement)

                })


            })
        }


    </script>
            }